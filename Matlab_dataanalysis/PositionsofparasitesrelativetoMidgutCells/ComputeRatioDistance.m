%**************************
%  Compute the ratio between (Distance (Parasite, nearest Nuclei),
%  Distance(nuclei, nearest Nuclei)
%************************
%% IMPORT for OPENIMADIS CID iMANAGE
javaaddpath(' PATH to client-api.jar')
% ******* Note that client
% javaclasspath; %% copy this line in the navigator first time
import java.io.File
import java.lang.String
import java.lang.Double
import java.util.HashSet;
import com.strandgenomics.imaging.iclient.ImageSpace
import java.util.Set
import com.strandgenomics.imaging.iclient.ImageSpaceObject
import com.strandgenomics.imaging.icore.SearchCondition

%% PARAMETERS
cellLayerW=10; %um predefined thickness of cells layer, estimated from the images

% other example below:
% tag2=String('TPI');
% lim1=Double(18);
% lim2=Double(25);
% sc= SearchCondition(tag2,lim1,lim2);

%% Connection to the database
ispace = com.strandgenomics.imaging.iclient.ImageSpaceObject.getConnectionManager();
AppID= String ('XXX'); % removed for security reasons
Server=String ('cid.curie.fr');
% The opassword needs to be generated by a user with download right on the
% project. (TOKEN associated to the corresponding app)
password=String('XXX'); % removed for security reasons
ispace.login(true,Server,443,AppID, password);
%% Download data from the database
projectList = ispace.getActiveProjects();
is=ImageSpaceObject.getImageSpace();
p=is.findProject('Malaria parasite invasion in the mosquito tissues'); % name of the project.

% search the list of records with tag value in filename
where = HashSet();
where.add(p.getName());

conditions=  HashSet();
tag=String('G12'); % the value of field mosquito type to be search for.
projectSpecGuids=is.search(tag,where, conditions, 100);
% Files create by MACRO XXX allowing to upload
prefixParasite='SemiManualOverlay_';
prefixNuclei='NucleiInfo';
suffix='_1.txt';
AllParasites=[];
% For each record filling the previous conditions,
%    - get the text file previuously generated by XXX containing the position of
%    parasites and iport their position
%    -  - get the text file previuously generated by XXX containing the position of
%    cell nuclei and import their position
%    - check if the cell layer model has been already generated (if yes, go to
%    following)
%    - Fit a polynomial surface to the position of nuclei to represent the
%    cell layer
%    - Upload a view of this fit for visual check ( named CellLayerMicrons_
%    recordGUID.jpg
%    Then for each parasite :
%       - Compute the distance from each parasite to the closest point on the
%    surface of the cell layer
%       - Give a score to the parasite normalized such that it is 0.5 if at
%    the middle of cells. 
%       - Upload a file (parasitesnormalized) containing for all parasites 
%           1)Record GUID
%           2)Parasite tag
%           3) position X in microns/ position Y in microns (in image cos)
%           4) position Z relative to cell layer position (0 on surface fit) 
%           5) TPI as read from the data base
%           6) Average Intensity as measured by XXX 
%           7) Distance to Nearest Nuclei/Interstitial Score (score > 0.6
%           in cell, inferior to 0.6 interstitial )

for i=1:length(projectSpecGuids)
    myFileNameParasites=[prefixParasite,num2str(projectSpecGuids(i)),suffix];
    myFileNameNuclei=[prefixNuclei,num2str(projectSpecGuids(i)),suffix];
    myFileNameAlreadyUploaded=['CellLayerMicrons_',num2str(projectSpecGuids(i)),'.jpg'];
    rec = is.findRecordForGUID(projectSpecGuids(i));
    test=rec.getAttachments();
    it=test.iterator();
    Nucleifound=0;
    Parasitesfound=0;
    AlreadyDone=0;
    while (it.hasNext())
        readattach=it.next();
        if (readattach.getName().compareToIgnoreCase(myFileNameParasites)==0)
            myfile=readattach.getFile();
            name=myfile.getPath();
            c=char(name);
            Parasites= importdata(c);
            Parasitesfound=1;
        end
        if (readattach.getName().compareToIgnoreCase(myFileNameNuclei)==0)
            myfile=readattach.getFile();
            name=myfile.getPath();
            c=char(name);
            Nuclei= importdata(c);
            Nucleifound=1;
        end
        if (readattach.getName().compareToIgnoreCase(myFileNameAlreadyUploaded)==0)
            
            AlreadyDone=1;
        end
    end
    
    if and(Parasitesfound,Nucleifound)
        
        
        Xnuclei=Nuclei.data(:,2)*rec.getPixelSizeAlongXAxis() ;
        Ynuclei=Nuclei.data(:,3)*rec.getPixelSizeAlongYAxis() ;
        Znuclei=Nuclei.data(:,5)*rec.getPixelSizeAlongZAxis() ; %in cos as parasites
         sf = fit( [ Xnuclei, Ynuclei], Znuclei, 'poly33','Robust','Bisquare');
        
        guid=projectSpecGuids(i);
        plot(sf, [ Xnuclei, Ynuclei], Znuclei)
        
        Xparasites=Parasites(:,2)*rec.getPixelSizeAlongXAxis() ;
        Yparasites=Parasites(:,3)*rec.getPixelSizeAlongYAxis() ;
        Zparasites=Parasites(:,4)*rec.getPixelSizeAlongZAxis() ;
        AverageIntensityParasites=Parasites(:,6) ;
        hold on;
        plot3(Xparasites,Yparasites,Zparasites,'*r')
        camorbit(180,0,'data',[0 1 0]);
        saveas(gcf,[num2str(guid),'.jpg']) ;
        
        %% upload attachement files
        jpegfile=File('.',[num2str(guid),'.jpg']);
        rec.addAttachment(jpegfile, ['CellLayerMicronsFlipped_',num2str(guid),'.jpg'], 'Cell Layer obtained by fitting with a polynomial surface function the nuclei positions. Parasites are the red stars. ABove in this view means crossed');
        rec.addCustomHistory('Cell Layer was obtained launching computeRatioDistance.m after pixel size correction') ;
        
        % to get nearest nuclei neighbors
        %[IDX,D] = knnsearch([X1,Y1,Z1],[xp,yp,zp]);
        % to get distance from the cell layer?
        [X,Y] = meshgrid(0:rec.getPixelSizeAlongXAxis():512*rec.getPixelSizeAlongXAxis() ,0:rec.getPixelSizeAlongYAxis():512*rec.getPixelSizeAlongYAxis());
        z = feval(sf,X,Y);
        figure,  plot3(X,Y,z,'ob');
        %pos of a point=(x,y,z(x,y))
        Xvector=reshape(X,size(X,1)*size(X,2),1);
        Yvector=reshape(Y,size(Y,1)*size(Y,2),1);
        Zvector=reshape(z,size(Y,1)*size(Y,2),1);
        
        [IDX,D] = knnsearch([ Xvector,Yvector,Zvector],[Xparasites,Yparasites,Zparasites]);
        %array GUID, corrected X,Y,Z of parasites (corrected by the celle
        %layer position) + TPI + average instensity
        
        
        
        annotations=rec.getUserAnnotations();
        TPI=annotations.get('TPI');
        TPI=str2double(TPI);
        %guid=projectSpecGuids(i);
        ParasitesOneGUID=zeros(length(Xparasites),9);
        for p=1:length(Xparasites)
            hold on,plot3([Xvector(IDX(p));Xparasites(p)],[Yvector(IDX(p));Yparasites(p)],[Zvector(IDX(p));Zparasites(p)],'*-k')
            ParasitesOneGUID(p,1)=guid;
            ParasitesOneGUID(p,2)=p;
            ParasitesOneGUID(p,3)=Xparasites(p);
            ParasitesOneGUID(p,4)=Yparasites(p);
            ParasitesOneGUID(p,5)=Zparasites(p)-Zvector(IDX(p));
            ParasitesOneGUID(p,6)=TPI;
            ParasitesOneGUID(p,7)= AverageIntensityParasites(p);
            if and(ParasitesOneGUID(p,5)>=-cellLayerW,ParasitesOneGUID(p,5)<=cellLayerW)
               
                
                % theses are the 4 nearest nuclei neighbors of the parasites
                [IDXn2,Dn2] = knnsearch([ Xnuclei,Ynuclei,Znuclei],[Xparasites(p),Yparasites(p),Zparasites(p)],'k',4);
                figure,plot3( Xparasites(p),Yparasites(p),Zparasites(p),'.r'); hold on;
                plot3( Xnuclei,Ynuclei,Znuclei,'b.')
                plot3( Xnuclei(IDXn2(1)),Ynuclei(IDXn2(1)),Znuclei(IDXn2(1)),'g.')
                
                plot3( Xnuclei(IDXn2),Ynuclei(IDXn2),Znuclei(IDXn2),'ro')
                %[IDXinter,Dinter] = knnsearch([  Xnuclei(IDXn2),Ynuclei(IDXn2),Znuclei(IDXn2)],[ Xnuclei(IDXn2),Ynuclei(IDXn2),Znuclei(IDXn2)],'k',4);
                Distanceinter=zeros(6,1);
                Distanceinter(1)=distance3D(Xnuclei(IDXn2(1)),Ynuclei(IDXn2(1)),Znuclei(IDXn2(1)),Xnuclei(IDXn2(2)),Ynuclei(IDXn2(2)),Znuclei(IDXn2(2)));
                Distanceinter(2)=distance3D(Xnuclei(IDXn2(1)),Ynuclei(IDXn2(1)),Znuclei(IDXn2(1)),Xnuclei(IDXn2(3)),Ynuclei(IDXn2(3)),Znuclei(IDXn2(3)));
                Distanceinter(3)=distance3D(Xnuclei(IDXn2(1)),Ynuclei(IDXn2(1)),Znuclei(IDXn2(1)),Xnuclei(IDXn2(4)),Ynuclei(IDXn2(4)),Znuclei(IDXn2(4)));
                Distanceinter(4)=distance3D(Xnuclei(IDXn2(2)),Ynuclei(IDXn2(2)),Znuclei(IDXn2(2)),Xnuclei(IDXn2(3)),Ynuclei(IDXn2(3)),Znuclei(IDXn2(3)));
                Distanceinter(5)=distance3D(Xnuclei(IDXn2(2)),Ynuclei(IDXn2(2)),Znuclei(IDXn2(2)),Xnuclei(IDXn2(4)),Ynuclei(IDXn2(4)),Znuclei(IDXn2(4)));
                Distanceinter(6)=distance3D(Xnuclei(IDXn2(3)),Ynuclei(IDXn2(3)),Znuclei(IDXn2(3)),Xnuclei(IDXn2(4)),Ynuclei(IDXn2(4)),Znuclei(IDXn2(4)));
                ParasitesOneGUID(p,8)=Dn2(1);
                ratio=Dn2(1)/trimmean(Distanceinter,80);
                ParasitesOneGUID(p,9)=1-exp(-0.3466/ratio); %_0.3466 =-ln(0.5)*0.5 such that P(p in cell)=0.5 if parasite at the middle of 2 cells
            else
                ParasitesOneGUID(p,8)=nan;
                ParasitesOneGUID(p,9)=nan;
            end
        end
        xlim([0 512])
        ylim([0 512])
        zlim([0 512])
        saveas(gcf,[num2str(guid),'corrected.jpg']) ;
        txtfilename=['ParasitesNormalized_',num2str(projectSpecGuids(i)),'.txt'];
        txtfile=File('.',txtfilename);
        dlmwrite(txtfilename,ParasitesOneGUID,'\t');
        rec.addAttachment(txtfile, txtfilename, 'Record GUID/Parasite tag/X in microns/ Y in microns/Z relative to cell layer position/TPI/Average Intensity/Distance to Nearest Nuclei/Interstitial Score (score > 0.6 in cell, inferior to 0.6 interstitial');
        rec.addCustomHistory(['File ', txtfilename,' was uploaded by computeRatioDistance.m considering cell width +/-10um for defining paraistes in cells']) ;
        AllParasites=[AllParasites;ParasitesOneGUID];
        close all;
        disp([num2str(projectSpecGuids(i)), ' processed']);
    else
        disp(['Onefile was missing for record' ,num2str(projectSpecGuids(i)), 'I''ve skipped it'])
        
        
    end
    
end
% some additional plotting in local for checking the merge of parasites for one particular conditions.
figure,
Z=zeros(size(X));
mesh(X,Y,Z); hold on;
scatter3( AllParasites(:,2),AllParasites(:,3),AllParasites(:,4),3,AllParasites(:,6));
figure,
scatter3( AllParasites(:,6),AllParasites(:,5),AllParasites(:,4));
     
    